services:
  mongodb:
    image: mongo:4.0.4
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - ./data:/data/db
    networks:
      - mynetwork
    restart: always

  mysql:
    image: mysql:5.7
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: mydb
      MYSQL_USER: myuser
      MYSQL_PASSWORD: mypassword
    volumes:
      - ./data:/var/lib/mysql
    networks:
      - mynetwork
    restart: always

### Replication ###

  ## Mysql replication ##

  mysql-replication:
    image: mysql:5.7
    container_name: mysql-replication
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: mydb
      MYSQL_USER: myuser
      MYSQL_PASSWORD: mypassword
    volumes:
      - ./data-replication:/var/lib/mysql
    networks:
      - mynetwork
    restart: always

  ## MongoDB replication ##
  # cf https://medium.com/workleap/the-only-local-mongodb-replica-set-with-docker-compose-guide-youll-ever-need-2f0b74dd8384 

  mongodb-replica1:
    image: mongo:7.0
    container_name: mongodb-replication
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    ports:
      - 27018:27018
    volumes:
      - "mongo1_data:/data/db"
      - "mongo1_config:/data/configdb"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27018',priority:1},{_id:1,host:'host.docker.internal:27019',priority:0.5},{_id:2,host:'host.docker.internal:27020',priority:0.5}]}) }" | mongosh --port 27018 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    restart: unless-stopped

  mongodb-replica2:
    image: mongo:7.0
    container_name: mongodb-replication2
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    ports:
      - 27019:27019
    volumes:
      - "mongo2_data:/data/db"
      - "mongo2_config:/data/configdb"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
  
  mongodb-replica3:
    image: mongo:7.0
    container_name: mongodb-replication3
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27020"]
    ports:
      - 27020:27020
    volumes:
      - "mongo3_data:/data/db"
      - "mongo3_config:/data/configdb"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

volumes:

  ## Mysql replication ##

  ## Mongodb replication ##
  mongo1_data:
  mongo1_config:
  mongo2_data:
  mongo2_config:
  mongo3_data:
  mongo3_config: