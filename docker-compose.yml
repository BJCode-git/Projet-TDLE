services: 

  ### MySQL Standalone ###

    mysql-standalone:
      container_name: 'mysql-standalone'
      image: 'mysql:latest'
      #command: #--default-authentication-plugin=mysql_native_password
      ports:
        - 3306:3306
      volumes:
        - mysql-data:/var/lib/mysql
      #env_file:
      #  - .env
      environment:
        MYSQL_ROOT_PASSWORD: "root"
        MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
        MYSQL_PASSWORD:      ${MYSQL_PASSWORD}
        MYSQL_DATABASE:     "test"
        MYSQL_USER:         "admin"


  ### End Standalone ###

  ### MySQL Replication ###

    mysql-replica1:
      container_name: 'mysql-replica1'
      hostname: 'mysql-replica1'
      image: 'mysql:latest'
      command: --default-authentication-plugin=mysql_native_password --port=3316
      ports:
        - 3316:3316
      volumes:
        - mysql-master-data:/var/lib/mysql
      env_file:
        - .env
      environment:
        MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
        MYSQL_PASSWORD:      ${MYSQL_PASSWORD}
        MYSQL_DATABASE:      ${MYSQL_DATABASE}
        MYSQL_USER:          ${MYSQL_USER}

    mysql-replica2:
      container_name: 'mysql-replica2'
      hostname: 'mysql-replica2'
      image: 'mysql:latest'
      command: --default-authentication-plugin=mysql_native_password
      extra_hosts:
        - "host.docker.internal:host-gateway"
      ports:
        - 3317:3317
      volumes:
        - mysql-slave1-data:/var/lib/mysql
      env_file:
        - .env
      environment:
        MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
        MYSQL_PASSWORD:      ${MYSQL_PASSWORD}
        MYSQL_DATABASE:      ${MYSQL_DATABASE}
        MYSQL_USER:          ${MYSQL_USER}

    mysql-replica3:
      container_name: 'mysql-replica3'
      hostname: 'mysql-replica3'
      image: 'mysql:latest'
      command: --default-authentication-plugin=mysql_native_password --port=3318
      extra_hosts:
      - "host.docker.internal:host-gateway"
      ports:
        - 3318:3318
      volumes:
        - mysql-slave1-data:/var/lib/mysql
      env_file:
        - .env
      environment:
        MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
        MYSQL_PASSWORD:      ${MYSQL_PASSWORD}
        MYSQL_DATABASE:      ${MYSQL_DATABASE}
        MYSQL_USER:          ${MYSQL_USER}
      
    ### Initiate Replication ###
    mysql-replica-initiate:
      image: mysql:latest
      container_name: 'mysql-replica-initiate'
      entrypoint: >
        bash -c '
          mysql -u root -p${MYSQL_PASSWORD} -e "CHANGE MASTER TO MASTER_HOST=\"mysql-replica1\", MASTER_USER=\"${MYSQL_USER}\", MASTER_PASSWORD=\"${MYSQL_PASSWORD}\", MASTER_AUTO_POSITION=1; START SLAVE;"'
      depends_on:
        - mysql-replica1
        - mysql-replica2
        - mysql-replica3
      restart: on-failure
      env_file:
        - .env
      environment:
        MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
        MYSQL_PASSWORD:      ${MYSQL_PASSWORD}
        MYSQL_DATABASE:      ${MYSQL_DATABASE}
        MYSQL_USER:          ${MYSQL_USER}
  
    ### End Initiate Replication ###

  ### End Replication ###

  ### MySQL Cluster ###

    mysql-manager: 
      container_name: 'mysql-manager'
      hostname: 'mysql-manager'
      image: 'mysql/mysql-cluster:8.0'
      command : ndb_mgmd  --ndb-nodeid=1 #--reload --config-dir=/etc/ --config-file=/etc/mysql-cluster.cnf
      networks:
        mysql-network :
            ipv4_address: 192.168.0.2
      volumes:
       - ./mysql.conf/my.cnf:/etc/my.cnf
       - ./mysql.conf/mysql-cluster.cnf:/etc/mysql-cluster.cnf
        - mysql-cluster-data:/var/lib/mysql
      env_file:
        - .env

    mysql-ndbd1:
      container_name: 'mysql-ndbd1'
      image: 'mysql/mysql-cluster:8.0'
      command : ndbd 
      networks:
         mysql-network :
             ipv4_address: 192.168.0.3
      volumes:
       - ./mysql.conf/my.cnf:/etc/my.cnf
       - ./mysql.conf/mysql-cluster.cnf:/etc/mysql-cluster.cnf
        - mysql-cluster-data:/var/lib/mysql
      env_file:
        - .env

    mysql-ndbd2:
      container_name: 'mysql-ndbd2'
      image: 'mysql/mysql-cluster:8.0'
      command : ndbd 
      networks:
              mysql-network :
                  ipv4_address: 192.168.0.4
      volumes:
       - ./mysql.conf/my.cnf:/etc/my.cnf
       - ./mysql.conf/mysql-cluster.cnf:/etc/mysql-cluster.cnf
        - mysql-cluster-data:/var/lib/mysql
      env_file: 
        - .env

    mysql-node1:
      container_name: 'mysql-node1'
      image: 'mysql/mysql-cluster:8.0'
      command : mysqld --default-authentication-plugin=mysql_native_password #--ndb-nodeid=4 --ndb-connectstring=mysql-manager:1186 --bind-address=0.0.0.0 #:3329
      ports:
        - 3329:3306
      networks:
        mysql-network :
            ipv4_address: 192.168.0.10
      volumes:
       - ./mysql.conf/my.cnf:/etc/my.cnf
       - ./mysql.conf/mysql-cluster.cnf:/etc/mysql-cluster.cnf
        - mysql-cluster-data:/var/lib/mysql
      env_file:
        - .env
      environment:
        MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
        MYSQL_PASSWORD:      ${MYSQL_PASSWORD}
        MYSQL_DATABASE:      ${MYSQL_DATABASE}
        MYSQL_USER:          ${MYSQL_USER}
        SERVICE_TAGS: dev
        SERVICE_NAME: mysql



    mysql-sharded-initiate:
      image: mysql/mysql-cluster:8.0
      container_name: 'mysql-sharded-initiate'
      networks:
        - mysql-network
      entrypoint:
        bash -c '
          mysql -u root -p${MYSQL_PASSWORD} -h 192.168.0.10 -e "
          CREATE DATABASE IF NOT EXISTS test;
          USE test;
          CREATE TABLE IF NOT EXISTS test (
              id INT NOT NULL,
              title VARCHAR(255) NOT NULL,
              author VARCHAR(255) NOT NULL,
              published_date DATE,
              genre VARCHAR(100),
              price FLOAT,
              copies_sold INT NOT NULL,
              rand INT
          )" 


          exit 0'
      depends_on:
        mysql-manager:
          condition: service_started
        mysql-ndbd1:
          condition: service_started
        mysql-ndbd2:
          condition: service_started
        mysql-node1:
          condition: service_healthy
      restart: on-failure
  
  ### Mongo Standalone ###

    mongo-standalone:
      container_name: 'mongo-standalone'
      hostname: 'mongo-standalone'
      image: 'mongo:latest'
      command: mongod --bind_ip_all --port 27017
      ports:
        - 27017:27017
      volumes:
        - mongodata:/data-alone/db
        - mongoconfig:/data-alone/configdb
      env_file:
        - .env

  ### End Standalone ###

#### Mongo Replica Set ####

  ### Mongo Replica1  ###
    mongo-replica1:
      container_name: 'mongo-replica1'
      hostname: 'mongo-replica1'
      image: mongo:latest
      command: mongod --replSet "rs0" --bind_ip_all --port 27018
      ports:
        - 27018:27018
      extra_hosts:
        - "host.docker.internal:host-gateway"
      volumes:
        - "mongo-replica1_data:/data/db"
        - "mongo-replica1_config:/data/configdb"
    
    ### End Replica1 ###

    ### Mongo Replica2  ###
    mongo-replica2:
      image: mongo:latest
      container_name: 'mongo-replica2'
      hostname: 'mongo-replica2'
      command: mongod --replSet "rs0" --bind_ip_all --port 27019
      ports:
        - 27019:27019
      extra_hosts:
        - "host.docker.internal:host-gateway"
      volumes:
        - "mongo-replica2_data:/data/db"
        - "mongo-replica2_config:/data/configdb"

    ### End Replica2 ###

    ### Mongo Replica3  ###
    mongo-replica3:
      image: mongo:latest
      container_name: 'mongo-replica3'
      hostname: 'mongo-replica3'
      command: mongod --replSet "rs0" --bind_ip_all --port 27020
      ports:
        - 27020:27020
      extra_hosts:
        - "host.docker.internal:host-gateway"
      volumes:
        - "mongo-replica3_data:/data/db"
        - "mongo-replica3_config:/data/configdb"
    ### End Replica3 ###

    ### Initiate Replica Set ###
    mongo-replica-initiate:
      image: mongo:latest
      container_name: 'mongo-replica-initiate'
      hostname: 'mongo-replica-initiate'
      entrypoint: >
        bash -c '
          sleep 10 &&
          mongosh --host mongo-replica1:27018 --eval "
          rs.initiate({
            _id: \"rs0\",
            members:  [
                        {_id: 0, host: \"mongo-replica1:27018\", priority: 1},
                        {_id: 1, host: \"mongo-replica2:27019\", priority: 0.1},
                        {_id: 2, host: \"mongo-replica3:27020\", priority: 0.1}
                      ]
          })"&&
          exit 0'
      depends_on:
        - mongo-replica1
        - mongo-replica2
        - mongo-replica3
      extra_hosts:
        - "host.docker.internal:host-gateway"
      restart: on-failure
      
      ### End Initiate Replica Set ###

  ### End Replica Set ###

#### Mongo Shards #### cf https://github.com/yasasdy/mongodb-sharding.git

  ### Mongo Config Server ###
  
    configserver1:
      container_name: configserver1
      hostname: configserver1
      image: mongo:latest
      command: mongod --configsvr --replSet configserver  --dbpath /data/db --port 27110 --bind_ip_all
      ports:
        - 27110:27110
      volumes:
        - configserver1:/data/db
      extra_hosts:
        - "host.docker.internal:host-gateway"

    configserver2:
      container_name: configserver2
      hostname: configserver2
      image: mongo:latest
      command: mongod --configsvr --replSet configserver --dbpath /data/db --port 27111 --bind_ip_all
      ports:
        - 27111:27111
      volumes:
        - configserver2:/data/db
      extra_hosts:
        - "host.docker.internal:host-gateway"

    configserver3:
      container_name: configserver3
      hostname: configserver3
      image: mongo:latest
      command: mongod --configsvr --replSet configserver --dbpath /data/db --port 27112 --bind_ip_all
      ports:
        - 27112:27112
      volumes:
        - configserver3:/data/db
      extra_hosts:
        - "host.docker.internal:host-gateway"

    mongo-config-server-init:
      container_name: mongo-config-server-init
      hostname: mongo-config-server-init
      extra_hosts:
        - "host.docker.internal:host-gateway"
      image: mongo:latest
      depends_on:
        - configserver1
        - configserver2
        - configserver3
      command: >
        bash -c '
        echo "on initialise les config servers" &&
        sleep 10 &&
        mongosh configserver1:27110 --eval "rs.initiate(
          {
            _id: \"configserver\",
            configsvr: true,
            members: [
              { _id : 0, host : \"configserver1:27110\" },
              { _id : 1, host : \"configserver2:27111\" },
              { _id : 2, host : \"configserver3:27112\" }
            ]
          }
        )" &&
        exit 0'
      #extra_hosts:
#        - "host.docker.internal:host-gateway"
      restart: on-failure

  ### End Config Server ###

  ### Mongo Shard 1 ###

    shardsvr1_1:
      container_name: shardsvr1_1
      hostname: shardsvr1_1
      image: mongo:latest
      command: mongod --shardsvr --replSet shard1_rs --dbpath /data/db --port 27117 --bind_ip_all
      ports:
        - 27117:27117
      volumes:
        - shardsvr1_1:/data/db
      extra_hosts:
        - "host.docker.internal:host-gateway"

    shardsvr1_2:
      container_name: shardsvr1_2
      hostname: shardsvr1_2
      image: mongo:latest
      command: mongod --shardsvr --replSet shard1_rs --dbpath /data/db --port 27118 --bind_ip_all
      ports:
        - 27118:27118
      volumes:
        - shardsvr1_2:/data/db
      extra_hosts:
        - "host.docker.internal:host-gateway"

    shardsvr1_3:
      container_name: shardsvr1_3
      hostname: shardsvr1_3
      image: mongo:latest
      command: mongod --shardsvr --replSet shard1_rs --dbpath /data/db --port 27119 --bind_ip_all
      ports:
        - 27119:27119
      volumes:
        - shardsvr1_3:/data/db
      extra_hosts:
        - "host.docker.internal:host-gateway"

    mongo-shard1-initiate:
      container_name: mongo-shard1-initiate
      hostname: mongo-shard1-initiate
      extra_hosts:
        - "host.docker.internal:host-gateway"
      image: mongo:latest
      depends_on:
        shardsvr1_1:
          condition : service_started
        shardsvr1_2:
          condition : service_started
        shardsvr1_3:
          condition : service_started
      command: >
        bash -c '
        echo "on initialise le shard 1 " &&
        mongosh shardsvr1_1:27117 --eval "rs.initiate(
          {
            _id: \"shard1_rs\",
            members: [
              { _id : 0, host : \"shardsvr1_1:27117\" },
              { _id : 1, host : \"shardsvr1_2:27118\" },
              { _id : 2, host : \"shardsvr1_3:27119\" }
            ]
          }
        )"'
      #extra_hosts:
#        - "host.docker.internal:host-gateway"
      restart: on-failure

  ### End Shard 2 ###

  ### Mongo Shard 2 ###

    shardsvr2_1:
      container_name: shardsvr2_1
      hostname: shardsvr2_1
      image: mongo:latest
      command: mongod --shardsvr --replSet shard2_rs --dbpath /data/db --port 27217 --bind_ip_all
      ports:
        - 27217:27217
      volumes:
        - shardsvr2_1:/data/db
      extra_hosts:
        - "host.docker.internal:host-gateway"

    shardsvr2_2:
      container_name: shardsvr2_2
      hostname: shardsvr2_2
      image: mongo:latest
      command: mongod --shardsvr --replSet shard2_rs --dbpath /data/db --port 27218 --bind_ip_all
      ports:
        - 27218:27218
      volumes:
        - shardsvr2_2:/data/db
      extra_hosts:
        - "host.docker.internal:host-gateway"
        
    shardsvr2_3:
      container_name: shardsvr2_3
      hostname: shardsvr2_3
      image: mongo:latest
      command: mongod --shardsvr --replSet shard2_rs --dbpath /data/db --port 27219 --bind_ip_all
      ports:
        - 27219:27219
      volumes:
        - shardsvr2_3:/data/db
      extra_hosts:
        - "host.docker.internal:host-gateway"

    mongo-shard2-initiate:
      container_name: mongo-shard2-initiate
      hostname: mongo-shard2-initiate
      extra_hosts:
        - "host.docker.internal:host-gateway"
      image: mongo:latest
      depends_on:
        - shardsvr2_1
        - shardsvr2_2
        - shardsvr2_3
      command: >
        bash -c '
        echo "on initialise le shard 2" &&
        mongosh shardsvr2_1:27217 --eval "rs.initiate(
          {
            _id: \"shard2_rs\",
            members: [
              { _id : 0, host : \"shardsvr2_1:27217\" },
              { _id : 1, host : \"shardsvr2_2:27218\" },
              { _id : 2, host : \"shardsvr2_3:27219\" }
            ]
          }
        )"'
      #extra_hosts:
#        - "host.docker.internal:host-gateway"
      restart: on-failure
        
  ### End Shard 2 ###

  ### Mongo Router ###

    mongo-router:
      container_name: mongo-router
      hostname: mongo-router
      image: mongo:latest
      command: mongos --configdb configserver/configserver1:27110,configserver2:27111,configserver3:27112 --bind_ip_all --port 27115
      depends_on:
        mongo-config-server-init :
            condition: service_completed_successfully
        mongo-shard1-initiate :
            condition: service_completed_successfully
        mongo-shard2-initiate :
            condition: service_completed_successfully
      ports:
        - 27115:27115
      volumes:
        - mongo-router:/data
      extra_hosts:
        - "host.docker.internal:host-gateway"

  ### End Router ###

    mongo-sharded-cluster:
      container_name: mongo-sharded-cluster
      image: mongo:latest
      # La base de données est test.
      # La collection est test et la clé de sharding est _id
      command: >
        bash -c '
        echo "on configure le router pour le shard 1" &&
        mongosh mongo-router:27115 --eval "sh.addShard(\"shard1_rs/shardsvr1_1:27117,shardsvr1_2:27118,shardsvr1_3:27119\")" &&
        echo "on configure le router pour le shard 2" &&
        mongosh mongo-router:27115 --eval "sh.addShard(\"shard2_rs/shardsvr2_1:27217,shardsvr2_2:27218,shardsvr2_3:27219\")" &&
        echo "on crée la base de données test si elle n existe pas" &&
        mongosh mongo-router:27115 --eval "db.getSiblingDB(\"test\").createCollection(\"test\")" &&
        echo "on active le sharding sur la base de données test" &&
        mongosh mongo-router:27115 --eval "sh.enableSharding(\"test\")" &&
        mongosh mongo-router:27115 --eval "sh.shardCollection(\"test.test\", { _id: \"hashed\" })" &&
        mongosh mongo-router:27115 --eval "sh.status()"'
      depends_on:
        - mongo-router
      extra_hosts: 
        - "host.docker.internal:host-gateway"
      restart: on-failure

### End Mongo Shards ###

### Python tests ###

    generate-data:
      image: python:latest
      container_name: generate-data
      env_file:
        - .env
      command: >
        bash -c '
        pip install -r requirements.txt &&
        python3 generate_data.py'
      volumes:
        - ./.env:/.env
        - ./generate_data.py:/generate_data.py
        - ./requirements/generate_data-requirements.txt:/requirements.txt
        - generated-data:/generated-data

    start_mongo:
      image: alpine:latest
      container_name: start_mongo
      extra_hosts: 
        - "host.docker.internal:host-gateway"
      command: echo "MongoDB is started !"
      depends_on:
        mongo-standalone :
          condition: service_started
        mongo-replica-initiate :
          condition: service_completed_successfully
        mongo-sharded-cluster :
          condition: service_completed_successfully
        


    test-mongo:
      image: python:latest
      container_name: test-mongo
      extra_hosts: 
        - "host.docker.internal:host-gateway"
      depends_on:
        generate-data:
          condition: service_completed_successfully
        mongo-standalone :
          condition: service_started
        mongo-replica-initiate :
          condition: service_completed_successfully
        mongo-sharded-cluster :
          condition: service_completed_successfully
      command: >
        bash -c '
        pip install -r requirements.txt &&
        python3 mongodb.py
        killall mongod
        '
      volumes:
        - ./.env:/.env
        - ./generate_data.py:/generate_data.py
        - ./mongodb.py:/mongodb.py
        - ./requirements/mongo-requirements.txt:/requirements.txt
        - ./plots/:/plots
        - generated-data:/generated-data


    start_mysql:
      image: alpine:latest
      container_name: start_mysql
      command: echo "MySQL is started !"
      depends_on:
        mysql-standalone :
          condition: service_started
        mysql-sharded-initiate :
          condition: service_completed_successfully
      restart: on-failure

    test-mysql:
      image: python:latest
      container_name: test-mysql
      depends_on:
        generate-data:
          condition: service_completed_successfully
        mysql-standalone :
          condition: service_healthy
        mysql-replica-initiate :
          condition: service_completed_successfully
        mysql-sharded-initiate :
          condition: service_completed_successfully
      command: >
        bash -c '
        pip install -r requirements.txt &&
        python3 mysql.py
        killall mysqld'
      volumes:
        - ./mysql.py:/mysql.py
        - ./logs:/logs
        - .plots/:/plots
        - ./requirements/mysql-requirements.txt:/requirements.txt
        - generated-data:/generated-data

    performance-tests:
      image: python3:latest
      container_name: performance-tests
      depends_on:
        test-mongo:
          condition: service_completed_successfully
        test-mysql:
          condition: service_completed_successfully
      command: >
        bash -c '
        echo "Test effectués avec succès !"'
      
    


### End Python tests ###

    
### End Mongo Shards ###

volumes:
  # Data tests
  generated-data:

  # MySQL Standalone
  mysql-data:

  # MySQL Replication
  mysql-master-data:
  mysql-slave1-data:

  # MySQL Cluster
  mysql-cluster-data:

  # Mongo Standalone
  mongodata:
  mongoconfig:

  # Mongo Replica Set
  mongo-replica1_data:
  mongo-replica2_data:
  mongo-replica3_data:
  mongo-replica1_config:
  mongo-replica2_config:
  mongo-replica3_config:
  
  # Mongo Shards

  ## mongo router
  mongo-router:

  ## mongo config server
  configserver1:
  configserver2:
  configserver3:

  ## mongo shard 1
  shardsvr1_1:
  shardsvr1_2:
  shardsvr1_3:

  ## mongo shard 2
  shardsvr2_1:
  shardsvr2_2:
  shardsvr2_3:

  
networks:
  # Sous réseau pour les tests : 192.168.0.0/16
  mysql-network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.0.0/24